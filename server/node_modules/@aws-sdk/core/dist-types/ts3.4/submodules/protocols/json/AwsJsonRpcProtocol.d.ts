import { RpcProtocol } from "@smithy/core/protocols";
import {
  EndpointBearer,
  HandlerExecutionContext,
  HttpRequest,
  HttpResponse,
  OperationSchema,
  ResponseMetadata,
  SerdeFunctions,
  ShapeDeserializer,
  ShapeSerializer,
} from "@smithy/types";
import { JsonCodec } from "./JsonCodec";
export declare abstract class AwsJsonRpcProtocol extends RpcProtocol {
  protected serializer: ShapeSerializer<string | Uint8Array>;
  protected deserializer: ShapeDeserializer<string | Uint8Array>;
<<<<<<< HEAD
  private codec;
  protected constructor({ defaultNamespace }: { defaultNamespace: string });
=======
  protected serviceTarget: string;
  private codec;
  protected constructor({
    defaultNamespace,
    serviceTarget,
  }: {
    defaultNamespace: string;
    serviceTarget: string;
  });
>>>>>>> 6b71973e4dbc377a6b1d24635b2c2a964d264161
  serializeRequest<Input extends object>(
    operationSchema: OperationSchema,
    input: Input,
    context: HandlerExecutionContext & SerdeFunctions & EndpointBearer
  ): Promise<HttpRequest>;
  getPayloadCodec(): JsonCodec;
  protected abstract getJsonRpcVersion(): "1.1" | "1.0";
  protected handleError(
    operationSchema: OperationSchema,
    context: HandlerExecutionContext & SerdeFunctions,
    response: HttpResponse,
    dataObject: any,
    metadata: ResponseMetadata
  ): Promise<never>;
}
